@page "/scorecard"
@using Back_end.Shared
@using Back_end.Client.Services
@inject HttpClient Http
@inject UserSession userSession
@inject NavigationManager navigationManager

<h3>Scorecard</h3>

<h4>Enter your score on each hole:</h4>
@foreach (var hole in Holes)
{
    <div>
        <label>@hole.HoleNumber</label>
        <div>
            <input @bind="hole.Score" type="number" step="1" class="form-control d-inline-block" placeholder="Enter Score" style="width: 100px;" />
        </div>
    </div>
}

<hr />

<div class="mt-3">
    <button class="btn btn-primary" @onclick="SubmitScorecard">Submit Entire Scorecard</button>
</div>

@if (!string.IsNullOrEmpty(message))
{
    <p style="color: @(isErrorMessage ? "red" : "black")">@message</p>
}

<hr />

<h4>Retrieve Scorecard by Date</h4>
<div class="form-group">
    <label>Day:</label>
    <input required @bind="day" type="number" min="1" max="31" class="form-control" style="width: 100px;" />
</div>
<div class="form-group">
    <label>Month:</label>
    <input required @bind="month" type="number" min="1" max="12" class="form-control" style="width: 100px;" />
</div>
<div class="form-group">
    <label>Year:</label>
    <input required @bind="year" type="number" min="1900" max="2100" class="form-control" style="width: 100px;" />
</div>
<div class="form-group">
    <label>Session Number:</label>
    <input required @bind="sessionNumber" type="number" min="1" class="form-control" style="width: 100px;" />
</div>
<button class="btn btn-secondary" @onclick="RetrieveScorecard">Retrieve</button>

@if (retrievedHoles != null)
{
    <h4>Retrieved Scorecard</h4>
    <table class="table">
        <thead>
            <tr>
                <th>Hole Number</th>
                <th>Score</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var hole in retrievedHoles)
            {
                <tr>
                    <td>@hole.HoleNumber</td>
                    <td>@hole.Score</td>
                </tr>
            }
        </tbody>
    </table>
    <p><strong>Total Score:</strong> @retrievedTotalScore</p>
}


@code {
    public List<Hole> Holes { get; set; } = new();
    public List<Hole> ?retrievedHoles { get; set; }
    public int retrievedTotalScore = 0;
    public int day = DateTime.Today.Day;
    public int month = DateTime.Today.Month;
    public int year = DateTime.Today.Year;
    public int sessionNumber = 1;

    public string ?message;
    public bool isErrorMessage;

    protected override async Task OnInitializedAsync()
    {
        if (!userSession.IsLoggedIn())
        {
            navigationManager.NavigateTo("/loginregister");
        }
        else
        {
            Holes = Enumerable.Range(1, 18).Select(n => new Hole { HoleNumber = n, UserId = userSession.UserId }).ToList();
        }
    }

    private async Task SubmitScorecard()
    {
        var response = await Http.PostAsJsonAsync("Users/submitScorecard", Holes);
        if (response.IsSuccessStatusCode)
        {
            message = "Scorecard submitted successfully!";
            isErrorMessage = false;
        }
        else
        {
            message = "Error submitting scorecard.";
            isErrorMessage = true;
        }
    }

    private async Task RetrieveScorecard()
    {
        try
        {
            DateTime date = new DateTime(year, month, day);
            string formattedDate = date.ToString("yyyy-MM-dd");

            var response = await Http.GetFromJsonAsync<List<Hole>>($"Users/getScorecard?userId={userSession.UserId}&date={formattedDate}&sessionNumber={sessionNumber}");

            if (response != null && response.Count > 0)
            {
                retrievedHoles = response;
                retrievedTotalScore = retrievedHoles.Sum(h => h.Score);
                message = "Scorecard retrieved successfully.";
                isErrorMessage = false;
            }
            else
            {
                message = "No scorecard found for this date and session. Please try another date or session.";
                isErrorMessage = true;
            }
        }
        catch
        {
            message = "Invalid date entered. Please enter a valid date.";
            isErrorMessage = true;
        }
    }
}
